---
description:
globs:
alwaysApply: false
---

ntroduction
openapi-react-query is a type-safe tiny wrapper (1 kb) around @tanstack/react-query to work with OpenAPI schema.

It works by using openapi-fetch and openapi-typescript so you get all the following features:

✅ No typos in URLs or params.
✅ All parameters, request bodies, and responses are type-checked and 100% match your schema
✅ No manual typing of your API
✅ Eliminates any types that hide bugs
✅ Also eliminates as type overrides that can also hide bugs

src/my-component.ts

import createFetchClient from "openapi-fetch";
import createClient from "openapi-react-query";
import type { paths } from "./my-openapi-3-schema"; // generated by openapi-typescript

const fetchClient = createFetchClient<paths>({
  baseUrl: "https://myapi.dev/v1/",
});
const $api = createClient(fetchClient);

const MyComponent = () => {
  const { data, error, isLoading } = $api.useQuery(
    "get",
    "/blogposts/{post_id}",
    {
      params: {
        path: { post_id: 5 },
      },
    },
  );

  if (isLoading || !data) return "Loading...";

  if (error) return `An error occured: ${error.message}`;

  return <div>{data.title}</div>;
};
Setup
Install this library along with openapi-fetch and openapi-typescript:


npm i openapi-react-query openapi-fetch
npm i -D openapi-typescript typescript
Highly recommended

Enable noUncheckedIndexedAccess in your tsconfig.json (docs)

Next, generate TypeScript types from your OpenAPI schema using openapi-typescript:


npx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts
Basic usage
Once your types has been generated from your schema, you can create a fetch client, a react-query client and start querying your API.


src/my-component.ts

import createFetchClient from "openapi-fetch";
import createClient from "openapi-react-query";
import type { paths } from "./my-openapi-3-schema"; // generated by openapi-typescript

const fetchClient = createFetchClient<paths>({
  baseUrl: "https://myapi.dev/v1/",
});
const $api = createClient(fetchClient);

const MyComponent = () => {
  const { data, error, isLoading } = $api.useQuery(
    "get",
    "/blogposts/{post_id}",
    {
      params: {
        path: { post_id: 5 },
      },
    },
  );

  if (isLoading || !data) return "Loading...";

  if (error) return `An error occured: ${error.message}`;

  return <div>{data.title}</div>;
};

useQuery
The useQuery method allows you to use the original useQuery.

The result is the same as the original function.
The functionKey is [method, path, params].
data and error are fully typed.
You can pass queries options as fourth parameter.
TIP

You can find more information about useQuery on the @tanstack/react-query documentation.

Example

src/app.tsx

src/api.ts

import { $api } from "./api";

export const App = () => {
  const { data, error, isLoading } = $api.useQuery("get", "/users/{user_id}", {
    params: {
      path: { user_id: 5 },
    },
  });

  if (!data || isLoading) return "Loading...";
  if (error) return `An error occured: ${error.message}`;

  return <div>{data.firstname}</div>;
};
Api

const query = $api.useQuery(method, path, options, queryOptions, queryClient);
Arguments

method (required)
The HTTP method to use for the request.
The method is used as key. See Query Keys for more information.
path (required)
The pathname to use for the request.
Must be an available path for the given method in your schema.
The pathname is used as key. See Query Keys for more information.
options
The fetch options to use for the request.
Only required if the OpenApi schema requires parameters.
The options params are used as key. See Query Keys for more information.
queryOptions
The original useQuery options.
See more information
queryClient
The original queryClient option.
See more information


useMutation
The useMutation method allows you to use the original useMutation.

The result is the same as the original function.
The mutationKey is [method, path].
data and error are fully typed.
TIP

You can find more information about useMutation on the @tanstack/react-query documentation.

Example

src/app.tsx

src/api.ts

import { $api } from "./api";

export const App = () => {
  const { mutate } = $api.useMutation("patch", "/users");

  return (
    <button onClick={() => mutate({ body: { firstname: "John" } })}>
      Update
    </button>
  );
};
Api

const query = $api.useMutation(method, path, queryOptions, queryClient);
Arguments

method (required)
The HTTP method to use for the request.
The method is used as key. See Query Keys for more information.
path (required)
The pathname to use for the request.
Must be an available path for the given method in your schema.
The pathname is used as key. See Query Keys for more information.
queryOptions
The original useMutation options.
See more information
queryClient
The original queryClient option.
See more information